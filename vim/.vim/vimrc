if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()

Plug 'ervandew/supertab'
Plug 'godlygeek/tabular'
Plug 'jiangmiao/auto-pairs'
Plug 'vim-syntastic/syntastic'

call plug#end()

" magic
filetype plugin on
set nocompatible

" auto reload file when it's changed from the outside
set autoread

" change leader key
let mapleader = " "
let g:mapleader = " "

" color stuff
set t_Co=256
set cursorline
colorscheme desert
syntax on

highlight CursorLine cterm=bold term=bold

" trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

" current position
set ruler
set number
set relativenumber

set cmdheight=2

" normal backspace
set backspace=eol,start,indent
set whichwrap=<,>,h,l

" searching
set ignorecase
set smartcase
set hlsearch
set incsearch
set magic

" macros
set lazyredraw

set showmatch
set mat=2

" file
set encoding=utf-8
set ffs=unix,dos,mac

" no backups because git
set nobackup
set nowb
set noswapfile

" 1 tab = spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

set smarttab
set shiftround

" autoindent
filetype plugin indent on
set ai
set si

set wrap

set clipboard=unnamed

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

"" Binds

" smash escape
inoremap kj <esc>

" move blocks
vnoremap < <gv
vnoremap > >gv

" quick save
nnoremap <leader>w :w<cr>
nnoremap <leader>sw :w !sudo tee %<cr>

" nohl
nnoremap <leader>a :nohl<cr>

" spell checking
map <F6> :setlocal spell! spelllang=en_us<cr>

" jump to <++>
nnoremap <leader><tab> /<++><cr>:nohl<cr>"_c4l
inoremap <leader><tab> <esc>/<++><cr>:nohl<cr>"_c4l

"" Plugins

" tabularize
nnoremap <leader>t= :Tab/=<cr>
vnoremap <leader>t= :Tab/=<cr>

" syntastic
map <leader>s :SyntasticToggleMode<cr>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatislineFlag()}
set statusline+=%*

let g:syntastic_cpp_include_dirs = ["/usr/include/wine/windows/"]

"" Langs

" LaTeX
function! s:latex_mappings()
	inoremap ;sec \section{}<cr><cr><++><esc>2kf}i
	inoremap ;ssec \subsection{}<cr><cr><++><esc>2kf}i
	inoremap ;sssec \subsubsection{}<cr><cr><++><esc>2kf}i

	inoremap ;up \usepackage{}<esc>i
	inoremap ;m \( \)<++><esc>T(i<space>
	inoremap ;M \[ \]<cr><cr><++><esc>kk$T[i<space>
	inoremap ;v <space>\)<esc>BBi\( <esc>f)a
	inoremap ^^ ^{}<++><esc>F}i
	inoremap __ _{}<++><esc>F}i

	inoremap ;be <esc>"ayiWi\begin{<esc>Ea}<cr>\end{<esc>"apa}<cr><++><esc>2ko

	inoremap ;8 \infty

	inoremap ;it \textit{}<++><esc>F}i
	inoremap ;bf \textbf{}<++><esc>F}i
	inoremap ;ul \underline{}<++><esc>F}i
	inoremap ;em \emph{}<++><esc>F}i

	inoremap ;frac \frac{}{<++>}<++><esc>2F{a

	" build
	nnoremap <F5> :! latexmk -pdf <c-r>%<cr>
endfunction

autocmd BufNewFile,BufRead *.tex call s:latex_mappings()

" c/c++
function! s:insert_include_guards()
    let guardname = substitute(toupper(expand("%:t")), "\\.", "_", "g")
    execute "normal! i#ifndef " . guardname
    execute "normal! o#define " . guardname
    execute "normal! o"
    execute "normal! o"
    execute "normal! o"
    execute "normal! Go#endif /* " . guardname . " */"
    normal! kk
endfunction

autocmd BufNewFile *.{h,hpp,hxx} call <SID>insert_include_guards()
