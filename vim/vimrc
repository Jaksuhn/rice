execute pathogen#infect()

" auto reload after saving
autocmd! bufwritepost ~/.vim/vimrc source %

" magic
filetype plugin on
set nocompatible

" automatically reload file if its changed from the outside
set autoread

" better leader key
let mapleader = ","
let g:mapleader = ","

" quicker save
nnoremap <leader>w :w<cr>

" color stuff
set t_Co=256
colorscheme default

" show current position
set ruler
set number
set relativenumber

set cmdheight=2

" hide buffer when its abandonded
set hid

" normal backspace
set backspace=eol,start,indent
set whichwrap=<,>,h,l

" ignore case (searching)
set ignorecase
set smartcase

" highlight search stuff
set hlsearch

" modern search
set incsearch

" dont redraw during macros
set lazyredraw

" regular expressions
set magic

" matching brackets
set showmatch
set mat=2

" syntax highlighting
syntax enable

" set background=dark

" utf-8 as default
set encoding=utf-8

" unix as standard file type
set ffs=unix,dos,mac

" no backups because useless (also git)
set nobackup
set nowb
set noswapfile

" spaces > tabs
set expandtab
set smarttab
set shiftround

" 1 tab = 4 spaces
set shiftwidth=4
set tabstop=4
set softtabstop=4

" autoindent
filetype plugin indent on
set ai
" smartindent
set si
" wrap lines
set wrap

" remove highlighting from search
map <silent> <leader><space> :nohl<cr>

" better clipboard
set clipboard=unnamed

" easier movement of code blocks
vnoremap < <gv
vnoremap > >gv

" smash esc
inoremap kj <esc>

" tabularize
nmap <leader>t= :Tab /=<cr>
vmap <leader>t= :Tab /=<cr>
nmap <leader>t: :Tab /:<cr>
vmap <leader>t: :Tab /:<cr>
nmap <leader>t; :Tab /;<cr>
vmap <leader>t; :Tab /;<cr>

" spellchecking
map <F6> :setlocal spell! spelllang=en_us<cr>

" jump to <++>
inoremap <space><space> <esc>/<++><cr>:nohl<cr>"_c4l
nnoremap <space><space> /<++><cr>:nohl<cr>"_c4l

" LaTeX
function! s:latex_mappings()
  inoremap ;sec \section{}<Enter><Enter><++><Esc>2kf}i
  inoremap ;ssec \subsection{}<Enter><Enter><++><Esc>2kf}i
  inoremap ;sssec \subsubsection{}<Enter><Enter><++><Esc>2kf}i

  inoremap ;up \usepackage{}<esc>i

  inoremap ;m $$<++><esc>2T$i
  inoremap ;M $$$$<cr><cr><++><esc>2k$hi
  inoremap ;v $<esc>Bi$<esc>f$a
  inoremap ^^ ^{}<++><esc>F}i
  inoremap __ _{}<++><esc>F}i

  inoremap ;be <esc>"ayiwi\begin{<esc>ea}<cr>\end{<esc>"apa}<cr><++><esc>2ko

  inoremap ;8 \infty

  inoremap ;it \textit{}<++><esc>F}i
  inoremap ;bf \textbf{}<++><esc>F}i
  inoremap ;ul \underline{}<++><esc>F}i
  inoremap ;em \emph{}<++><esc>F}i

  inoremap ;tab \begin{tabular}{}<cr><++><cr>\end{tabular}<cr><++><esc>3k2f{a
  inoremap ;frac \frac{}{<++>}<++><esc>2F{a

  " templates
  inoremap ;art <esc>:0r~/.vim/skeletons/article.tex<cr>/<++><cr>:nohl<cr>"_c4l
endfunction

autocmd BufNewFile,BufRead *.tex call s:latex_mappings()

function! s:insert_include_guards()
  let guardname = substitute(toupper(expand("%:t")), "\\.", " ", "g")
  execute "normal! i#ifndef " . guardname
  execute "normal! o#define " . guardname
  execute "normal! o"
  execute "normal! Go#endif /* " . guardname . " */"
  normal! kk
endfunction

autocmd BufNewFile *.{h,hpp} call <SID>insert_include_guards()

" syntastic

map <leader>s :SyntasticToggleMode<cr>
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

function! s:haskell_mapping()

  " ghc-mod
  map <silent> tw :GhcModTypeInsert<CR>
  map <silent> ts :GhcModSplitFunCase<CR>
  map <silent> tq :GhcModType<CR>
  map <silent> te :GhcModTypeClear<CR>

  " supertab
  let g:haskellmode_completion_ghc=1
  setlocal omnifunc=necoghc
endfunction

autocmd bufnewfile,bufread *.hs call s:haskell_mapping()

highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/

let g:javascript_conceal_function                  = "Æ’"
let g:javascript_conceal_null                      = "Ã¸"
let g:javascript_conceal_this                      = "@"
let g:javascript_conceal_return                    = "â‡š"
let g:javascript_conceal_undefined                 = "Â¿"
let g:javascript_conceal_NaN                       = "â„•"
let g:javascript_conceal_prototype                 = "Â¶"
let g:javascript_conceal_static                    = "â€¢"
let g:javascript_conceal_super                     = "Î©"
let g:javascript_conceal_arrow_function            = "â‡’"
let g:javascript_conceal_noarg_arrow_function      = "ðŸž…"
let g:javascript_conceal_underscore_arrow_function = "ðŸž…"

set conceallevel=1

function RangerExplorer()
    exec "silent !ranger --choosefile=/tmp/vim_ranger_current_file " . system('echo "' . expand("%:p:h") . '" | sed -E "s/\ /\\\ /g"')
    if filereadable('/tmp/vim_ranger_current_file')
        exec 'edit ' . system('cat /tmp/vim_ranger_current_file | sed -E "s/\ /\\\ /g"')
        call system('rm /tmp/vim_ranger_current_file')
    endif
    redraw!
endfun

map <leader>x :call RangerExplorer()<cr>

