#+TITLE: Emacs Config

* General Settings

Typing =:ensure t= everywhere is very bothersome so I'd rather *not* do that.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

I don't want my Emacs to create loads of backup files, swap files, etc.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

Nor do I need all the (Windows 2000-esque) UI.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+END_SRC

When I fire up Emacs I want to be greeted with the =*scratch*= buffer, not the weird GNU screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

The whole yes or no prompt takes too much time to type out. y and n is much better.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

UTF-8 is good and should be the default for everything.

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

Which key makes Emacs self documenting.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

Tramp is awesome for editing remote files.
By default it's slow as fuck though.

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

* Looks

** =nyan-mode=

Nya-nya-nya-nya-nya...

#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode))
#+END_SRC

** Font

I prefer cherry font.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "cherry-13"))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

** Color Theme

I'm using a base16 theme at the moment, because I'm lazy. Might change in the future.

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :config
    (load-theme 'base16-mocha t))
#+END_SRC

* Editing

** =eval-and-replace=

Cool thing for on the spot meta programming.

#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))

  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC

** Trailing Whitespace

I *hate* trailing whitespace with a passion, so I want to see it.

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

I also want it to be removed automatically, but only on lines I edited.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (add-hook 'prog-mode-hook 'ws-butler-mode))
#+END_SRC

** =expand-region=

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :commands
    er/expand-region
    :bind
    ("C-=" . er/expand-region))
#+END_SRC

** Show parens pairs

Lots of languages use a lot of parens (lisp...). Would be neat if they'd show up.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

** Insert parens pairs

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

** Move between windows

#+BEGIN_SRC emacs-lisp
  (require 'windmove)
  (windmove-default-keybindings)
  (setq windmove-wrap-around t)
#+END_SRC

** Ivy

Ivy for completing stuff, etc. is huge.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (ivy-mode)
    :bind
    ("C-s" . swiper)
    ("M-x". counsel-M-x)
    ("C-x C-f" . counsel-find-file))
#+END_SRC

** =flycheck=

Syntax checking is good.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC

** =company-mode=

Completes anything.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode 1))
#+END_SRC

* Project

** Magit

The only good interface for =git=.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands
    magit-statue
    :bind
    ("M-g" . magit-status))
#+END_SRC

** Projectile

Neat project managing thing.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :commands
    projectile-command-map
    :bind
    ("M-p" . projectile-command-map)
    :config
    (projectile-mode 1))
#+END_SRC

* Languages

** Org-mode

Super tiresome to type all these =emacs-lisp= source blocks.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Org-mode works much better when you have a couple of global keybinds.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Syntax highlighting in HTML exports are nice.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

All the stars are super noisy. Org-mode has a =indent-mode= for this.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (org-indent-mode 1)))
#+END_SRC

Twitter bootstrap export is amazing and good.

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs)
#+END_SRC

** =AucTeX=

Since =AucTeX= overrides =tex= for some reason this is a weird hack that supposedly works.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
#+END_SRC

** =nix-mode=

#+BEGIN_SRC emacs-lisp
  (use-package nix-mode)
#+END_SRC

** =CC-mode=

I don't want Emacs to insert Tabs everywhere.

#+BEGIN_SRC emacs-lisp
  (setq indent-tabs-mode nil)
#+END_SRC

The way indentation is handled by default is horrible.
Let's fix that.

#+BEGIN_SRC emacs-lisp
  (setq c-default-style "user"
        c-basic-offset 4)
#+END_SRC

** Emacs Lisp

Emacs has a built in mode for elisp documentation.

#+BEGIN_SRC emacs-lisp
  (eldoc-mode 1)
#+END_SRC
