#+TITLE: Emacs Config

* General Settings

Typing =:ensure t= everywhere is very bothersome so I'd rather *not* do that.

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

Don't create all the custom things.

#+BEGIN_SRC emacs-lisp
  (defconst custom-file "/dev/null")
#+END_SRC

I don't want my Emacs to create loads of backup files, swap files, etc.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

Nor do I need all the (Windows 2000-esque) UI.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+END_SRC

When I fire up Emacs I want to be greeted with an empty =*scratch*= buffer, not the weird GNU screen.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        initial-scratch-message "")
#+END_SRC

The whole yes or no prompt takes too much time to type out. y and n is much better.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

UTF-8 is good and should be the default for everything.

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

Which key makes Emacs self documenting.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

Tramp is awesome for editing remote files.
By default it's slow as fuck though.

#+BEGIN_SRC emacs-lisp
  (setq tramp-default-method "ssh")
#+END_SRC

=direnv= allows me to have my nix stuff in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+END_SRC

* Looks

** tab width

#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
#+END_SRC

** =nyan-mode=

Nya-nya-nya-nya-nya...

#+BEGIN_SRC emacs-lisp
  (use-package nyan-mode
    :config
    (nyan-mode))
#+END_SRC

** Font

Preferred font atm.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "GoMono"))
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (setq linum-relative-backend 'display-line-numbers-mode)
    (linum-relative-global-mode 1))
#+END_SRC

Linum mode makes =doc-view-mode= almost unusable, so we better disable it there.

#+BEGIN_SRC emacs-lisp
  (add-hook 'doc-view-mode-hook (lambda ()
                                  (global-linum-relative-mode -1)))
#+END_SRC

** Color Theme

Nord theme, because easy and accessible and looks chill.

#+BEGIN_SRC emacs-lisp
  (use-package nord-theme
    :config
    (load-theme 'nord t))
#+END_SRC

** Beacon

Highlights the cursor each time I switch windows.

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config
    (beacon-mode 1))
#+END_SRC

** Fringe

Ugly.

#+BEGIN_SRC emacs-lisp
  (fringe-mode '(0 . 0))
#+END_SRC

* Editing

** =evil-mode=

Emacs is lacks a good editor.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    (setq evil-want-keybinding nil)
    :config
    (evil-mode 1))
#+END_SRC

*** evil-org-mode

 #+BEGIN_SRC emacs-lisp
   (use-package evil-org
     :after org
     :config
     (add-hook 'org-mode-hook 'evil-org-mode)
     (add-hook 'evil-org-mode-hook
	       (lambda ()
		 (evil-org-set-key-theme)))
     (require 'evil-org-agenda)
     (evil-org-agenda-set-keys))
 #+END_SRC

*** evil-collection

 Keybinds for common modes.
 Makes evil work everywhere.

 #+BEGIN_SRC emacs-lisp
   (use-package evil-collection
     :after evil
     :config
     (evil-collection-init))
 #+END_SRC

** general.el

#+BEGIN_SRC emacs-lisp
  (use-package general
    :config
    (general-evil-setup)
    (general-def
      :states '(normal motion)
      "SPC" nil)

    (general-create-definer bft-leader-def
      :prefix "SPC"
      :states '(normal motion)
      :keymaps 'override)
    (general-create-definer bft-local-leader-def
      :prefix "SPC m"
      :states '(normal motion)
      :keymaps 'local)

    (bft-leader-def
      "a" 'org-agenda
      "s" 'org-store-link
      "c" 'org-capture
      "t" (lambda () (interactive) (org-capture nil "t"))
      "w" 'save-buffer
      "f" 'counsel-find-file
      "m" 'delete-other-windows
      "d" 'delete-window
      "o" 'split-window-right
      "u" 'split-window-below
      "b" 'counsel-switch-buffer
      "h" 'evil-window-left
      "j" 'evil-window-down
      "k" 'evil-window-up
      "l" 'evil-window-right
      "1" 'delete-other-windows
      "0" 'delete-window))
#+END_SRC

** =eval-and-replace=

Cool thing for on the spot meta programming.

#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))

  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC

** Trailing Whitespace

I *hate* trailing whitespace with a passion, so I want to see it.

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

I also want it to be removed automatically, but only on lines I edited.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (ws-butler-global-mode))
#+END_SRC

** =expand-region=

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :commands
    er/expand-region
    :bind
    ("C-=" . er/expand-region))
#+END_SRC

** Show parens pairs

Lots of languages use a lot of parens (lisp...). Would be neat if they'd show up.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

** Insert parens pairs

#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

** Ivy

Ivy for completing stuff, etc. is huge.

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (ivy-mode)
    :bind
    ("C-s" . swiper)
    ("M-x". counsel-M-x))
#+END_SRC

** =flycheck=

Syntax checking is good.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (global-flycheck-mode))
#+END_SRC

** =company-mode=

Completes anything.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    (global-company-mode 1)
    (setq company-idle-delay 0)
    (setq company-show-numbers t))
#+END_SRC

** =popup-kill-ring=

Allows me to see the whole kill-ring with a single =M-y=.

#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind
    ("M-y" . popup-kill-ring))
#+END_SRC

** Sudo Edit

Super helpful when you forget to open a file as root.

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :config
    (bft-leader-def
      "e" 'sudo-edit))
#+END_SRC

** Easy window manipulation

These are in place even though general.el is used, because some buffers don't just work like that.
I keep this

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-1") 'delete-other-windows)
  (global-set-key (kbd "C-0") 'delete-window)
  (global-set-key (kbd "C-2") 'split-window-below)
  (global-set-key (kbd "C-3") 'split-window-right)
#+END_SRC

** Winner-mode

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC

** company-tabnine

#+BEGIN_SRC emacs-lisp
  (use-package company-tabnine
    :config
    (add-to-list 'company-backends #'company-tabnine))
#+END_SRC

* Project

** Magit

The only good interface for =git=.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind
    ("M-g" . magit-status))
#+END_SRC

=evil-collection= doesn't really work with magit for some reason, so I'll use =evil-magit= instead.

#+BEGIN_SRC emacs-lisp
  (use-package evil-magit)
#+END_SRC

** Projectile

Neat project managing thing.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1)
    (bft-leader-def
      "p" 'projectile-command-map))
#+END_SRC

** Treemacs

#+BEGIN_SRC emacs-lisp
  (use-package treemacs
    :config
    (bft-leader-def
      "g" 'treemacs)
    (general-define-key
     "M-0" 'treemacs-select-window)

    (add-hook 'treemacs-mode-hook (lambda ()
                                    (display-line-numbers-mode -1))))
#+END_SRC

* Languages

** Org-mode

Super tiresome to type all these =emacs-lisp= source blocks.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

Configure TODO keywords.

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE" "CANCELED")))

  (setq org-todo-keyword-faces
        '(("TODO" . org-todo)
          ("DONE" . org-done)
          ("CANCELED" . "red")))
#+END_SRC

Error if I type in an invisible (=...=) section.

#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits 'error)
#+END_SRC

Syntax highlighting in HTML exports are nice.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

All the stars are super noisy. Org-mode has a =indent-mode= for this.

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (org-indent-mode 1)))
#+END_SRC

Twitter bootstrap export is amazing and good.

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs)
#+END_SRC

*** Agenda

**** Open it in current frame

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-window-setup 'current-window)
#+END_SRC

**** Style

Custom agenda that shows priority stuff and catogerizes everything.[fn:https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html]

Emacs doesn't offer skipping habits or priority =A= stuff, so let's write functions for that.

#+BEGIN_SRC emacs-lisp
  (defun bft-org-skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))

  (defun bft-org-skip-subtree-if-habit ()
    "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (if (string= (org-entry-get nil "STYLE") "habit")
          subtree-end
        nil)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (agenda "" ((org-agenda-ndays 1)))
            (alltodo ""
                     ((org-agenda-skip-function '(or (bft-org-skip-subtree-if-habit)
                                                     (bft-org-skip-subtree-if-priority ?A)
                                                     (org-agenda-skip-if nil '(scheduled deadline))))
                      (org-agenda-overriding-header "ALL normal priority tasks:"))))
           ((org-agenda-compact-blocks t)))))
#+END_SRC

**** Files

Add all my org files.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/"))
#+END_SRC

*** Captures

Create new TODOs on the fly.

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(("t" "Todo" entry (file "~/org/unsorted.org")
           "* TODO %?")))

  (defun org-capture-todo ()
    (interactive)
    (org-capture nil "t"))

  (bft-leader-def
    "t" 'org-capture-todo)
#+END_SRC

** =AucTeX=

Since =AucTeX= overrides =tex= for some reason this is a weird hack that supposedly works.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
#+END_SRC

*** mupdf for preview

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load "tex"
    (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode
              (add-to-list 'TeX-view-program-list '("mupdf" ("mupdf-gl %o" (mode-io-correlate " %(outpage)"))))
              (setcdr (assq 'output-pdf TeX-view-program-selection) '("mupdf"))))
#+END_SRC

** =nix-mode=

#+BEGIN_SRC emacs-lisp
    (use-package nix-mode
      :mode "\\.nix\\'"
      :custom
      (nix-indent-function #'nix-indent-line))
#+END_SRC

** =CC-mode=

I don't want Emacs to insert Tabs everywhere.

#+BEGIN_SRC emacs-lisp
 (setq-default indent-tabs-mode nil)
#+END_SRC

The way indentation is handled by default is horrible.
Let's fix that.

#+BEGIN_SRC emacs-lisp
    (c-add-style "niclas"
                 '("bsd"
                   (c-syntactic-indentation-in-macros . nil)
                   (c-hanging-braces-alist
                    (block-close . c-snug-do-while))
                   (c-offsets-alist
                    (arglist-cont-nonempty . *)
                    (arglist-close . 0)
                    (statement-cont . +))
                   (indent-tab-mode . nil)))

    (setq c-default-style "niclas")

    (setq-default c-basic-offset 4)
#+END_SRC

** Emacs Lisp

Emacs has a built in mode for elisp documentation.

#+BEGIN_SRC emacs-lisp
  (eldoc-mode 1)
#+END_SRC

** Web

*** =impatient-mode=

=impatient-mode= helps quick development

#+BEGIN_SRC emacs-lisp
  (use-package impatient-mode)
#+END_SRC

*** =emmet-mode=

This makes it easy to write bad HTML fast.

# TODO: Look into =zencoding-mode=

#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :config
    (emmet-mode))
#+END_SRC

** Meson

#+BEGIN_SRC emacs-lisp
  (use-package meson-mode)
#+END_SRC

** C

*** flycheck

Broken atm (nix...).
Disable.

#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook (lambda ()
                           (flycheck-mode -1)))
#+END_SRC

*** Irony-mode

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

Irony for autocompletion

#+BEGIN_SRC emacs-lisp
  (use-package company-irony
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC

Irony as a flycheck backend

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :config
    (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))
#+END_SRC

** Common Lisp

SLIME is neat af.

#+BEGIN_SRC emacs-lisp
  (use-package slime
    :config
    (setq inferior-lisp-program "/bin/sbcl"
          slime-contribs '(slime-fancy)))
#+END_SRC
