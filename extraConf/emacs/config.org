* General Settings

** use-package

All those =:ensure t= get boring rather quickly. I'd rather not type that *all* the time

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

** Don't clutter my stuff

Don't clutter my files

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

Don't clutter my screen

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+END_SRC

No splash screen

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Nobody has time

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** UTF-8

#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** Trailing whitespace

I don't like trailing whitespace.

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

Also I like other people getting rid of it for me.

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (add-hook 'prog-mode-hook 'ws-butler-mode))
#+END_SRC

** Documentation

Self documenting emacs is the best emacs

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

** Line nums

#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

** Color theme

I'm using a base16 theme at the moment because im lazy. Might change though

#+BEGIN_SRC emacs-lisp
  (use-package base16-theme
    :config
    (load-theme 'base16-mocha t))
#+END_SRC

** Evaluate and replace

This is a cool thing for on-the-spot meta programming

#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))

  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC

* Getting Around

=C-x o= sucks when you have more than two windows.

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

I like to follow into the new splits when I create them

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

Searching is importang, searching good is importanter

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . 'swiper))
#+END_SRC

* Projects

** Magit

Literally the only usable, good git interface (apart from =git=)

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summery-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

* Languages

** company-mode

Completes anything. Literally.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :config
    'global-company-mode)
#+END_SRC

** Emacs-lisp

Emacs kind of uses a lot of parenthesis. It's easy to lose track of them

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

** org-mode

=<s TAB emacs-lisp= ...

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

*** Syntax highlighting in HTML exports

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

*** org-bullets

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
