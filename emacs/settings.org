#+TITLE: My emacs config
#+CREATOR: Niclas Meyer <niclas@countingsort.com>
#+LANGUAGE: en
#+OPTIONS: num:nil
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;

Yes, this is _my_ config and it is *not* made with others using it in mind. This said, feel free to take pieces and stick them together however you want.

Quick sidenote: I don't know if I'll stick to emacs, so this whole thing is kinda experimental right now.

* Installation

=git clone https://github.com/buffet/rice=

Then either symlink yourself, or use =home-manager= as you should anyways.

* General settings

First of all, I don't want =:ensure t= everywhere.

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** Remove clutter

Let's begin with removing all the visual clutter.

#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (menu-bar-mode -1)
#+END_SRC

And then also all the spammy files that get created.

#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
  (setq auto-save-default nil)
#+END_SRC

The splash screen is really not useful. I'll live with =*scratch*= for now, switch to a useful thing sometime.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

Last but not least, the default yes-no thing is way to long to type.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Text

Let's use UTF-8 everywhere, since it's what I use pretty much everywhere.

#+BEGIN_SRC emacs-lip
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** which-key

Being self documenting is what emacs excells at, so let's add this.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

* emacs lacks a good editor

Let's fix that. vim is pretty good. Thankfully someone realized that and there's evil-mode.

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
#+END_SRC

I can't stand the escape key, so I use =kj= as a smash escape.

#+BEGIN_SRC emacs-lisp
  (use-package evil-escape
    :init
    (setq-default evil-escape-key-sequence "kj")
    :config
    (evil-escape-mode 1))
#+END_SRC

A little more information on screen is always good.

#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

** Trailing whitespace

I *hate* trailing whitespace. So let's make it visible.

#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC

And remove it automatically (in lines I edited).

#+BEGIN_SRC emacs-lisp
  (use-package ws-butler
    :config
    (add-hook 'prog-mode-hook #'ws-butler-mode))
#+END_SRC

** Bar

Got used to this in spacemacs.

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :config
      (require 'spaceline-config)
	(setq spaceline-buffer-encoding-abbrev-p nil)
	(setq spaceline-line-column-p nil)
	(setq spaceline-line-p nil)
	(setq powerline-default-separator nil)
	(spaceline-spacemacs-theme))
#+END_SRC

*** Time

#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-format "%H:%M - %d %B %Y")
  (display-time-mode 1)
#+END_SRC

** Matching parens

This is kinda helpful. Especially since emacs uses kind of a lot of these.

#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC

* Helm

Help is good. Period. It helps everywhere and it just works. Just what I want.

#+BEGIN_SRC emacs-lisp
  (use-package helm
    :init
    (setq helm-M-x-fuzzy-match t
	  helm-mode-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-recentf-fuzzy-match t
	  helm-locate-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-imenu-fuzzy-match t
	  helm-completion-in-region-fuzzy-match t
	  helm-candidate-number-list 150
	  helm-split-window-in-side-p t
	  helm-move-to-line-cycle-in-source t
	  helm-echo-input-in-header-line t
	  helm-autoresize-max-height 0
	  helm-autoresize-min-height 20)
    :config
    (helm-mode 1))
#+END_SRC

* Getting around

This shit is so important.

** Switching windows

=C-x o= kinda sucks with many windows.

#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" "i" "o"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Follow splits

It's so annoying that you don't focus new splits.

#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

** Better search

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . 'swiper))
#+END_SRC

** Relative line numbers

Finally. This is pretty useful for doing something on the following =N= lines.

#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :config
    (setq linum-relative-current-symbol "")
    (add-hook 'prog-mode-hook 'linum-relative-mode))
#+END_SRC

* Project stuff

** Magit

Magit is literally the only git interface that's somewhat usable. And it's good at it on top of that.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-push-always-verify nil)
    (setq git-commit-summery-max-length 50)
    :bind
    ("M-g" . magit-status))
#+END_SRC

** Projectile

Projectile makes project management easy and fun.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :init
    (setq projectile-require-project-root nil)
    :config
    (projectile-mode 1))

(global-set-key (kbd "<f5>") 'projectile-compile-project)
#+END_SRC

* Languages

Missing language modes.

#+BEGIN_SRC emacs-lisp
  (use-package rust-mode)
#+END_SRC

** Org mode

*** Sane settings

#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " ")
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** Syntax highlighting in html exports

#+BEGIN_SRC emacs-lisp
  (use-package htmlize)
#+END_SRC

*** Line wrapping

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    (lambda ()
	      (visual-line-mode 1)))
#+END_SRC

*** Make it pretty

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC

*** emacs-lisp source template

Make =<el TAB= expand into an emacs-lisp block

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

*** Twitter Bootstrap

This just looks good. and is easy to share.

#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs)
#+END_SRC
